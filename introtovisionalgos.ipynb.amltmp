{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Goal\n",
        "This notebook contains a few algorithms in the course intro to computer vision and their implementations in python\n",
        "## list of algorithms\n",
        "1. \n",
        "## list of libraries and frameworks needed\n",
        "the libraries used\n",
        "- numpy\n",
        "- pytorch\n",
        "- matplotlib\n",
        "- and some more...\n",
        "- TBD"
      ],
      "metadata": {
        "id": "0vCPyR9K5lxN",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# for notebook setup\n",
        "%pip install -U ipykernel"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Collecting ipykernel\n  Using cached ipykernel-6.9.1-py3-none-any.whl (128 kB)\nRequirement already satisfied, skipping upgrade: matplotlib-inline<0.2.0,>=0.1.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipykernel) (0.1.3)\nRequirement already satisfied, skipping upgrade: ipython>=7.23.1 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipykernel) (8.0.1)\nRequirement already satisfied, skipping upgrade: tornado<7.0,>=4.2 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipykernel) (6.1)\nRequirement already satisfied, skipping upgrade: nest-asyncio in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipykernel) (1.5.4)\nRequirement already satisfied, skipping upgrade: traitlets<6.0,>=5.1.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipykernel) (5.1.1)\nRequirement already satisfied, skipping upgrade: debugpy<2.0,>=1.0.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipykernel) (1.5.1)\nRequirement already satisfied, skipping upgrade: jupyter-client<8.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipykernel) (6.1.12)\nRequirement already satisfied, skipping upgrade: stack-data in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (0.1.4)\nRequirement already satisfied, skipping upgrade: backcall in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (0.2.0)\nRequirement already satisfied, skipping upgrade: decorator in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (5.1.1)\nRequirement already satisfied, skipping upgrade: pexpect>4.3; sys_platform != \"win32\" in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (4.8.0)\nRequirement already satisfied, skipping upgrade: pickleshare in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (0.7.5)\nRequirement already satisfied, skipping upgrade: jedi>=0.16 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (0.18.0)\nRequirement already satisfied, skipping upgrade: pygments in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (2.11.2)\nRequirement already satisfied, skipping upgrade: setuptools>=18.5 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (50.3.0)\nRequirement already satisfied, skipping upgrade: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (3.0.26)\nRequirement already satisfied, skipping upgrade: black in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from ipython>=7.23.1->ipykernel) (22.1.0)\nRequirement already satisfied, skipping upgrade: python-dateutil>=2.1 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from jupyter-client<8.0->ipykernel) (2.8.2)\nRequirement already satisfied, skipping upgrade: pyzmq>=13 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from jupyter-client<8.0->ipykernel) (22.3.0)\nRequirement already satisfied, skipping upgrade: jupyter-core>=4.6.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from jupyter-client<8.0->ipykernel) (4.9.1)\nRequirement already satisfied, skipping upgrade: asttokens in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from stack-data->ipython>=7.23.1->ipykernel) (2.0.5)\nRequirement already satisfied, skipping upgrade: executing in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from stack-data->ipython>=7.23.1->ipykernel) (0.8.2)\nRequirement already satisfied, skipping upgrade: pure-eval in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from stack-data->ipython>=7.23.1->ipykernel) (0.2.2)\nRequirement already satisfied, skipping upgrade: ptyprocess>=0.5 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from pexpect>4.3; sys_platform != \"win32\"->ipython>=7.23.1->ipykernel) (0.7.0)\nRequirement already satisfied, skipping upgrade: parso<0.9.0,>=0.8.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from jedi>=0.16->ipython>=7.23.1->ipykernel) (0.8.3)\nRequirement already satisfied, skipping upgrade: wcwidth in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=7.23.1->ipykernel) (0.2.5)\nRequirement already satisfied, skipping upgrade: tomli>=1.1.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from black->ipython>=7.23.1->ipykernel) (2.0.1)\nRequirement already satisfied, skipping upgrade: click>=8.0.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from black->ipython>=7.23.1->ipykernel) (8.0.3)\nRequirement already satisfied, skipping upgrade: typing-extensions>=3.10.0.0; python_version < \"3.10\" in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from black->ipython>=7.23.1->ipykernel) (4.0.1)\nRequirement already satisfied, skipping upgrade: pathspec>=0.9.0 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from black->ipython>=7.23.1->ipykernel) (0.9.0)\nRequirement already satisfied, skipping upgrade: platformdirs>=2 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from black->ipython>=7.23.1->ipykernel) (2.4.1)\nRequirement already satisfied, skipping upgrade: mypy-extensions>=0.4.3 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from black->ipython>=7.23.1->ipykernel) (0.4.3)\nRequirement already satisfied, skipping upgrade: six>=1.5 in /anaconda/envs/azureml_py38/lib/python3.8/site-packages (from python-dateutil>=2.1->jupyter-client<8.0->ipykernel) (1.16.0)\n\u001b[31mERROR: responsibleai 0.16.0 has requirement ipykernel<6.0, but you'll have ipykernel 6.9.1 which is incompatible.\u001b[0m\n\u001b[31mERROR: raiwidgets 0.16.0 has requirement ipykernel<6.0, but you'll have ipykernel 6.9.1 which is incompatible.\u001b[0m\n\u001b[31mERROR: raiwidgets 0.16.0 has requirement ipython==7.16.1, but you'll have ipython 8.0.1 which is incompatible.\u001b[0m\n\u001b[31mERROR: raiwidgets 0.16.0 has requirement jinja2==2.11.3, but you'll have jinja2 2.11.2 which is incompatible.\u001b[0m\nInstalling collected packages: ipykernel\n  Attempting uninstall: ipykernel\n    Found existing installation: ipykernel 6.6.0\n    Uninstalling ipykernel-6.6.0:\n      Successfully uninstalled ipykernel-6.6.0\nSuccessfully installed ipykernel-6.9.1\nNote: you may need to restart the kernel to use updated packages.\n"
        }
      ],
      "execution_count": 16,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Fourier Transform\n",
        "\n",
        "The 2D fourier transforms is given in wolfram alpha\n",
        "- [https://www.wolframalpha.com/input?i=FourierTransform%5Bsin%28x%29%2Bcos%28y%29%2C%7Bx%2Cy%7D%2C%7Bu%2Cv%7D%5D]\n",
        "- [https://math.stackexchange.com/questions/780976/computing-2d-radially-symmetric-fourier-transforms-with-wolfram-alpha]\n",
        "\n",
        "To apply FFT on an image, we would use the numpy package\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Shannons sampling theorem\n"
      ],
      "metadata": {
        "id": "VW_tzC0s5lxT",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## The sampling theorem\n",
        "The sampling theorem state that  \n",
        "\n",
        "---\n",
        "let $f(x)$ be a continous function. We will assume that the 'most high frequency of $f(x)$ is $\\omega$'  \n",
        "\n",
        "Then $f(x)$ can be recovered from each sample in frequency higher than $2\\omega$\n",
        "\n",
        "\n",
        "The `most high frequency` of $f(x)$ came from the fourier series of f. \n",
        "\n",
        "Let $F(u) = \\int_{x=-\\infty}^{\\infty} {f(x)e^{-2\\pi ux}dx}$ be the fourier transform of $f(x)$\n",
        "\n",
        "By the properties of fourier transform and fourier series we know, that each function $f(x)$ can be described as a sum of cosin and sins with some frequencies\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "The following link may help\n",
        "https://www.youtube.com/watch?v=FcXZ28BX-xE\n",
        "\n"
      ],
      "metadata": {
        "id": "nrb5GsQU5lxU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### question from exam 2013\n",
        "\n",
        "1.1\tLET F(X) BE A FUNCTION. HOW CAN IT BE RESAMPLE?\n",
        "\n",
        "For simplicity, we will assume we can apply on f(x) the continuous fourier transform. If we can not, all the reconstruction process is \"invalid. We know that f(x) is composed from some sin() and cos() signals  with different frequencies (Fourier series).  \n",
        "The highest (u) with $ F(u)\\ne 0 $ when F is the fourier transform of f, is the hihest frequency appears in the fourier series of f.  \n",
        "If F is with `finite support` (i.e $\\exists_{B} \\forall_{|u|>B}(F(u)=0)$) it can be recovered in the lowest sampling frequency of 2B.\n",
        "\n",
        "This is a lower bound in some cases, and in some cases the function can be recovered in even lower frequency. however, If the sampling frequency is `uniform`, the Shannon's bound is mandatory\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "srSKzMqB5lxV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import PIL\n",
        "import cmath\n",
        "\n",
        "def DFT2D(image):\n",
        "    data = np.asarray(image)\n",
        "    M, N = image.size # (img x, img y)\n",
        "    dft2d = np.zeros((M,N),dtype=complex)\n",
        "    for k in range(M):\n",
        "        for l in range(N):\n",
        "            sum_matrix = 0.0\n",
        "            for m in range(M):\n",
        "                for n in range(N):\n",
        "                    e = cmath.exp(- 2j * np.pi * ((k * m) / M + (l * n) / N))\n",
        "                    sum_matrix +=  data[m,n,1] * e\n",
        "            dft2d[k,l] = sum_matrix\n",
        "    return dft2d\n",
        "# this code is not relly efficient since running in for loops and not with torch operations\n",
        "img = PIL.Image.open(r\"./new_bnw.jpg\")\n",
        "# plt.imshow(img)\n",
        "img2 = img.resize((50,50))\n",
        "# plt.imshow(img2)\n",
        "dft = DFT2D(img2)\n",
        "plt.imshow(dft.real)\n",
        "# pass image through a low pass filter"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "<matplotlib.image.AxesImage at 0x7f8ec7970130>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 7,
      "metadata": {
        "id": "8rxLoD-_5lxW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Apply low pass filter on an image\n"
      ],
      "metadata": {
        "id": "o8_rHdLM5lxY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Apply gaussian blur to an image centered in the center of the image"
      ],
      "metadata": {
        "id": "fxVjGjdP5lxY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# we will use PIL for that\n",
        "from PIL import Image,ImageFilter\n",
        "from matplotlib import pyplot as plt\n",
        "image = Image.open(r'./some_image.png')\n",
        "image_filter = image.filter(ImageFilter.GaussianBlur)\n",
        "image.show()\n",
        "plt.figure()\n",
        "plt.imshow(image)\n",
        "plt.figure()\n",
        "plt.imshow(image_filter)\n",
        "image_filter.show()\n"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 17,
      "metadata": {
        "gather": {
          "logged": 1646772199011
        },
        "id": "F8N_-OMS5lxZ",
        "outputId": "b562c3a5-b180-4639-f2cc-954d406e7fc9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.fft\n",
        "import torch\n",
        "import torchvision\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "img = Image.open(r'new_bnw.jpg')\n",
        "img = img.convert(mode='L')\n",
        "img = np.array(img)\n",
        "img = torch.from_numpy(img)\n",
        "print(img.shape)  # (512, 512)\n",
        "\n",
        "fft_img = torch.fft.fft(img)\n",
        "print(fft_img)  # torch.Size([512, 512])\n",
        "# convert torch to an image\n",
        "torchvision.transforms.functional.to_pil_image(pic=fft_img,mode='L')\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "torch.Size([2832, 4256])\ntensor([[153396.0000+0.0000j, -25890.1953-3355.9980j,\n           5932.5947-10229.9375j,  ...,\n         -19528.1523-9555.6582j,   5932.5947+10229.9375j,\n         -25890.1953+3355.9980j],\n        [153994.0000+0.0000j, -25437.0117-4117.2910j,\n           5530.1616-10598.5117j,  ...,\n         -19414.6016-9155.8867j,   5530.1616+10598.5117j,\n         -25437.0117+4117.2910j],\n        [152802.0000+0.0000j, -25206.6328-4314.8037j,\n           4979.6367-9898.8037j,  ...,\n         -19285.7266-9880.0195j,   4979.6367+9898.8037j,\n         -25206.6328+4314.8037j],\n        ...,\n        [ 36369.0000+0.0000j, -13652.7617-1162.3975j,\n           8174.8359+1343.2800j,  ...,\n           4718.9814+1418.7037j,   8174.8359-1343.2800j,\n         -13652.7617+1162.3975j],\n        [ 34409.0000+0.0000j, -12182.8145-1496.2539j,\n           6997.1436+1092.4060j,  ...,\n           5341.0122+1102.9846j,   6997.1436-1092.4060j,\n         -12182.8145+1496.2539j],\n        [ 33543.0000+0.0000j, -11013.3037-1534.9482j,\n           6074.3838+850.0256j,  ...,\n           6133.7139+662.3799j,   6074.3838-850.0256j,\n         -11013.3037+1534.9482j]])\n"
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Incorrect mode (L) supplied for input type <class 'numpy.dtype'>. Should be None",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[1;32m/home/azureuser/cloudfiles/code/Users/209056712/IntroToCvFinals/IntroToVisionAlgos.ipynb Cell 11'\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B66696c65706174683d2f686f6d652f617a757265757365722f636c6f756466696c65732f636f64652f55736572732f3230393035363731322f496e74726f546f437646696e616c732f496e74726f546f566973696f6e416c676f732e6970796e622b74656c656d65747279547261636b696e6749643d62376239616232652d373062622d343031632d386639322d3264663434333263393463302b73657373696f6e49643d4e362054542b6a75707974657255726c3d68747470733a2f2f7673636f6465736572766572776f722d61312e776573746575726f70652e696e7374616e6365732e617a7572656d6c2e6d732f2b776562736f636b657455726c54656d706c6174653d7673636f6465736572766572776f722d61312d3c57535f504f52543e2e776573746575726f70652e696e7374616e6365732e617a7572656d6c2e6d732f77732b776562736f636b6574506f72743d302b646973706c61794e616d653d7673636f6465736572766572776f722d61312b746172676574547970653d436f6d7075746520696e7374616e6365/home/azureuser/cloudfiles/code/Users/209056712/IntroToCvFinals/IntroToVisionAlgos.ipynb#ch0000010vscode-remote?line=14'>15</a>\u001b[0m \u001b[39mprint\u001b[39m(fft_img)  \u001b[39m# torch.Size([512, 512])\u001b[39;00m\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B66696c65706174683d2f686f6d652f617a757265757365722f636c6f756466696c65732f636f64652f55736572732f3230393035363731322f496e74726f546f437646696e616c732f496e74726f546f566973696f6e416c676f732e6970796e622b74656c656d65747279547261636b696e6749643d62376239616232652d373062622d343031632d386639322d3264663434333263393463302b73657373696f6e49643d4e362054542b6a75707974657255726c3d68747470733a2f2f7673636f6465736572766572776f722d61312e776573746575726f70652e696e7374616e6365732e617a7572656d6c2e6d732f2b776562736f636b657455726c54656d706c6174653d7673636f6465736572766572776f722d61312d3c57535f504f52543e2e776573746575726f70652e696e7374616e6365732e617a7572656d6c2e6d732f77732b776562736f636b6574506f72743d302b646973706c61794e616d653d7673636f6465736572766572776f722d61312b746172676574547970653d436f6d7075746520696e7374616e6365/home/azureuser/cloudfiles/code/Users/209056712/IntroToCvFinals/IntroToVisionAlgos.ipynb#ch0000010vscode-remote?line=15'>16</a>\u001b[0m \u001b[39m# convert torch to an image\u001b[39;00m\n\u001b[0;32m---> <a href='vscode-notebook-cell://amlext%2B66696c65706174683d2f686f6d652f617a757265757365722f636c6f756466696c65732f636f64652f55736572732f3230393035363731322f496e74726f546f437646696e616c732f496e74726f546f566973696f6e416c676f732e6970796e622b74656c656d65747279547261636b696e6749643d62376239616232652d373062622d343031632d386639322d3264663434333263393463302b73657373696f6e49643d4e362054542b6a75707974657255726c3d68747470733a2f2f7673636f6465736572766572776f722d61312e776573746575726f70652e696e7374616e6365732e617a7572656d6c2e6d732f2b776562736f636b657455726c54656d706c6174653d7673636f6465736572766572776f722d61312d3c57535f504f52543e2e776573746575726f70652e696e7374616e6365732e617a7572656d6c2e6d732f77732b776562736f636b6574506f72743d302b646973706c61794e616d653d7673636f6465736572766572776f722d61312b746172676574547970653d436f6d7075746520696e7374616e6365/home/azureuser/cloudfiles/code/Users/209056712/IntroToCvFinals/IntroToVisionAlgos.ipynb#ch0000010vscode-remote?line=16'>17</a>\u001b[0m torchvision\u001b[39m.\u001b[39;49mtransforms\u001b[39m.\u001b[39;49mfunctional\u001b[39m.\u001b[39;49mto_pil_image(pic\u001b[39m=\u001b[39;49mfft_img,mode\u001b[39m=\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39mL\u001b[39;49m\u001b[39m'\u001b[39;49m)\n",
            "File \u001b[0;32m/anaconda/envs/azureml_py38/lib/python3.8/site-packages/torchvision/transforms/functional.py:267\u001b[0m, in \u001b[0;36mto_pil_image\u001b[0;34m(pic, mode)\u001b[0m\n\u001b[1;32m    <a href='file:///anaconda/envs/azureml_py38/lib/python3.8/site-packages/torchvision/transforms/functional.py?line=264'>265</a>\u001b[0m         expected_mode \u001b[39m=\u001b[39m \u001b[39m'\u001b[39m\u001b[39mF\u001b[39m\u001b[39m'\u001b[39m\n\u001b[1;32m    <a href='file:///anaconda/envs/azureml_py38/lib/python3.8/site-packages/torchvision/transforms/functional.py?line=265'>266</a>\u001b[0m     \u001b[39mif\u001b[39;00m mode \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m \u001b[39mand\u001b[39;00m mode \u001b[39m!=\u001b[39m expected_mode:\n\u001b[0;32m--> <a href='file:///anaconda/envs/azureml_py38/lib/python3.8/site-packages/torchvision/transforms/functional.py?line=266'>267</a>\u001b[0m         \u001b[39mraise\u001b[39;00m \u001b[39mValueError\u001b[39;00m(\u001b[39m\"\u001b[39m\u001b[39mIncorrect mode (\u001b[39m\u001b[39m{}\u001b[39;00m\u001b[39m) supplied for input type \u001b[39m\u001b[39m{}\u001b[39;00m\u001b[39m. Should be \u001b[39m\u001b[39m{}\u001b[39;00m\u001b[39m\"\u001b[39m\n\u001b[1;32m    <a href='file:///anaconda/envs/azureml_py38/lib/python3.8/site-packages/torchvision/transforms/functional.py?line=267'>268</a>\u001b[0m                          \u001b[39m.\u001b[39mformat(mode, np\u001b[39m.\u001b[39mdtype, expected_mode))\n\u001b[1;32m    <a href='file:///anaconda/envs/azureml_py38/lib/python3.8/site-packages/torchvision/transforms/functional.py?line=268'>269</a>\u001b[0m     mode \u001b[39m=\u001b[39m expected_mode\n\u001b[1;32m    <a href='file:///anaconda/envs/azureml_py38/lib/python3.8/site-packages/torchvision/transforms/functional.py?line=270'>271</a>\u001b[0m \u001b[39melif\u001b[39;00m npimg\u001b[39m.\u001b[39mshape[\u001b[39m2\u001b[39m] \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n",
            "\u001b[0;31mValueError\u001b[0m: Incorrect mode (L) supplied for input type <class 'numpy.dtype'>. Should be None"
          ]
        }
      ],
      "execution_count": 18,
      "metadata": {
        "gather": {
          "logged": 1646333123842
        },
        "id": "p8FClR0H5lxb",
        "outputId": "0837ac6f-ffa8-4bd5-b3fe-f0c4125ab559"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "MAzfGPS85lxc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Transformations\n",
        "## Apply Affine trnasformation on an image\n",
        "Recall affine transformation is an ISOMETRIC - preserve parallelism, space and angles. by default, affine contains only 2 parts - rotation and translation, and it described by the following matrix\n",
        "\n",
        "$$\n",
        "\\begin{equation*}\n",
        "B = \n",
        "\\begin{bmatrix}\n",
        "cos(\\alpha) & -sin(\\alpha) & t_x \\\\\n",
        "sin(\\alpha) & cos(\\alpha) & t_y \\\\\n",
        "0 & 0 & 1\n",
        "\\end{bmatrix}\n",
        "\\end{equation*}\n",
        "$$\n",
        "\n",
        "When \n",
        "- $t_x$ is the translation in the x direction and $t_y$ the translation in the y direction\n",
        "- $\\alpha$ is the rotation matrix.\n",
        "- the new Z coordinate of a point $(x,y,z)$ is defined by the multiplication\n",
        "$$\n",
        "\\begin{equation*}\n",
        "v = \n",
        "\\begin{bmatrix}\n",
        "cos(\\alpha) & -sin(\\alpha) & t_x \\\\\n",
        "sin(\\alpha) & cos(\\alpha) & t_y \\\\\n",
        "0 & 0 & 1\n",
        "\\end{bmatrix}\n",
        "\\begin{bmatrix}\n",
        "           x \\\\\n",
        "           y \\\\\n",
        "           z\n",
        "         \\end{bmatrix}\n",
        "= \n",
        "\\begin{bmatrix}\n",
        "\\vdots \\\\\n",
        "1*z\n",
        "\\end{bmatrix}\n",
        "\\end{equation*}\n",
        "$$\n",
        "\n",
        "so the Z value is kept by this multiplication. Be default, the translation will be changed if the original Z value is not 1 (it will be scaled propely)\n",
        "\n",
        "Hence, `affine` transformation is not the same for each depth `Z` (as we would expect). Also, from pure math properties, we can say that the translation is scaled up in that way:\n",
        "$$ x_{new} = x_{old} +t_x*z_{old} $$\n",
        "so the translation - the distance point P is moving in the x direction is *larger* when the point is farther from the camera. This concept will come back when we will calculate optical flow.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "K4yC97f15lxd",
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### code implementation \n",
        "The default mode of PIL transformation is given by Image.\n",
        "Additional data would not be submitted. The only data we will have to give is the translation we want and the angle to do the transformation\n",
        "\n",
        "```python\n",
        "with Image.open(r'filepath') as image_object:\n",
        "    alpha = math.pi / 15.\n",
        "    image_object.transform((\n",
        "        math.cos(alpha), math.sin(alpha), 20,\n",
        "        -math.sin(alpha), math.cos(alpha), 20,\n",
        "        ))\n",
        "```  "
      ],
      "metadata": {
        "id": "vHnGMi5F5lxe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from PIL import Image\n",
        "import math\n",
        "from matplotlib import pyplot as plt\n",
        "plt.ion()\n",
        "with Image.open(r'./new_baby.png') as image_object:\n",
        "    alpha = math.pi / 15.\n",
        "    new_object = image_object.transform(data=(\n",
        "        math.cos(alpha), math.sin(alpha), 20,\n",
        "        -math.sin(alpha), math.cos(alpha), 20,\n",
        "        ),method=Image.AFFINE,size=(1000,1000)\n",
        "    )\n",
        "    plt.imshow(new_object)\n",
        "    "
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "executionInfo": {
          "elapsed": 600,
          "status": "ok",
          "timestamp": 1646632163085,
          "user": {
            "displayName": "",
            "photoUrl": "",
            "userId": ""
          },
          "user_tz": 480
        },
        "gather": {
          "logged": 1646771904295
        },
        "id": "N-yq-C7K5lxe",
        "outputId": "79b20b92-1bb2-4b1b-ba7d-a9ce00c9dead"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "## Apply Homography on an image\n",
        "One of the important course concepts.\n",
        "we will try to give illustration about the process\n",
        "\n",
        "Homography is detected by 8 points\n",
        "- 4 points, $\\wr(x_i,y_i)\\wr$  $i=1...4$ from the origin\n",
        "- 4 points in the destination $\\wr(a_i,b_i)\\wr$  $i=1...4$ - the function H will be have to satisfy\n",
        "\n",
        "\n",
        "$$ H((x_i,y_i)) = (a_i,b_i) $$\n",
        "\n",
        "The Homography has 8 degree of freedom, and it can be determined by a 3 by 3 Matrix with 1 in the bottom right\n",
        "corner  \n",
        "\n",
        "\n",
        "$$\n",
        "\\begin{equation*}\n",
        "B = \n",
        "\\begin{bmatrix}\n",
        "a & b & c \\\\\n",
        "d & e & f \\\\\n",
        "g & h & 1\n",
        "\\end{bmatrix}\n",
        "\\end{equation*}\n",
        "$$\n",
        "\n",
        "A way to implement is py applying image transfrom  \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "# when img is PIL image\n",
        "from PIL import image\n",
        "transformed_img = img.transform(\n",
        "        size=(new_width, new_height),\n",
        "        method=Image.PERSPECTIVE,\n",
        "        data=homography_param,\n",
        "        resample=Image.BICUBIC\n",
        "    )\n",
        "```\n",
        "\n",
        "condider the following image PIL feature\n",
        "\n",
        "```python\n",
        "class QuadTransform(Transform):\n",
        "    \"\"\"\n",
        "    Define a quad image transform.\n",
        "\n",
        "    Maps a quadrilateral (a region defined by four corners) from the image to a\n",
        "    rectangle of the given size.\n",
        "\n",
        "    See :py:meth:`~PIL.Image.Image.transform`\n",
        "\n",
        "    :param xy: An 8-tuple (x0, y0, x1, y1, x2, y2, x3, y3) which contain the\n",
        "        upper left, lower left, lower right, and upper right corner of the\n",
        "        source quadrilateral.\n",
        "    \"\"\"\n",
        "\n",
        "    method = Image.QUAD\n",
        "```\n",
        "\n",
        "\n",
        "this is a rectangle\n"
      ],
      "metadata": {
        "id": "6HjObAT45lxf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# simple image transform\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "image = Image.open(mode='r',fp=r'./new_baby.png')\n",
        "plt.ioff()\n",
        "new_image = image.transform(\n",
        "    method=Image.QUAD,\n",
        "    data=(0,0,1000,0,1000,1000,0,1000),\n",
        "    size=(1000,1000)\n",
        ")\n",
        "# QUAD is 4 points to 4 points transformation. the defalut is to insert the new 'crop' to init at (0,0)\n",
        "# returning a new image of a given size (`PIL.Image`)\n",
        "# again we will present with `pyplotlib`\n",
        "plt.imshow(new_image)\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "<matplotlib.image.AxesImage at 0x7f8ec7a351c0>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "executionInfo": {
          "elapsed": 862,
          "status": "ok",
          "timestamp": 1646632713386,
          "user": {
            "displayName": "",
            "photoUrl": "",
            "userId": ""
          },
          "user_tz": 480
        },
        "gather": {
          "logged": 1646775233265
        },
        "id": "eAXUo71A5lxg",
        "jupyter": {
          "outputs_hidden": true,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "outputId": "0f2e40e8-178c-43a8-810f-4ca375afa629"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "as you see, homography can be relly unclear from the first site. Things that are not kept\n",
        "\n",
        "\n",
        "*   Distance (between points)\n",
        "*   *Parallel lines*\n",
        "And all the image structure might be changed\n",
        "\n",
        "The **Data** argument is a 4 points ordered within a tuple, they are the *edges* of a quadradic shape (מרובע) taken from the image\n",
        "\n",
        "### How to recover homogrhapy that was done on 2 images?\n",
        "\n",
        "The question we want to tackle - let's say we have got image A, of a baby. We have passwd it to unknown homography, and got image B. Can we, given image A and image B, recover the homography parameters?\n",
        "\n",
        "Since Homography is vector marix multiplication, linear algebra would state we would need 8 equations for that (since we have got 8 params)\n",
        "#### important!\n",
        "in order to recover, we would need also *correspondence!* since we need to solve equations from the sort\n",
        "$$\n",
        "\\begin{equation*}\n",
        "\\begin{bmatrix}\n",
        "u \\\\\n",
        "v \\\\\n",
        "1\n",
        "\\end{bmatrix}\n",
        "= \n",
        "\\begin{bmatrix}\n",
        "a & b & c \\\\\n",
        "d & e & f \\\\\n",
        "g & h & 1\n",
        "\\end{bmatrix}\n",
        "\\begin{bmatrix}\n",
        "x \\\\\n",
        "y \\\\\n",
        "1\n",
        "\\end{bmatrix}\n",
        "\\end{equation*}\n",
        "$$\n",
        "\n",
        "we need to find (or to know) for (x,y) the matched (u,v) in the other frame.\n",
        "In general, this would lead us **to 9x9 matrix!**\n",
        "\n",
        "\n",
        "\n",
        "A proper function for that exists in the *OPENCV library* under this link\n",
        "\n",
        "A general algorithm for that is given by the **SVD** decomposition of the matrix. See also [https://math.stackexchange.com/questions/3509039/calculate-homography-with-and-without-svd]\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "v4aOZ4PJ8Lt6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "PVe3fxAk8oZL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_homography(image1,image2)\n",
        "\"\"\"\n",
        "This function is used to find homography between image1 and image2\n",
        "If there is no possible homography between the images, this shoud return an error\n",
        "\"\"\"\n",
        "    "
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Copy of IntroToVisionAlgos.ipynb",
      "provenance": [
        {
          "file_id": "https://github.com/idan-tankel/IntroToCvFinals/blob/main/IntroToVisionAlgos.ipynb",
          "timestamp": 1646632915968
        }
      ],
      "toc_visible": true
    },
    "interpreter": {
      "hash": "59b4c7809edb1ed3c1f43d11707fb4ed55010b12d03d62a5a69653dee4c22b9c"
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.1",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}